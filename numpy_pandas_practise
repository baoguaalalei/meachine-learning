# -*- coding: utf-8 -*-
"""
Created on Sun Jan 14 14:57:25 2018

@author: xuwenyan0527
"""

import tensorflow as tf 
'''
with tf.variable_scope("foo1"):
    v = tf.get_variable(
            "v",[1],initializer = tf.constant_initializer(1.0))
with tf.variable_scope("foo1",reuse = True):
    v1 = tf.get_variable("v",[1])
    print(v1==v)
'''
'''
'''
import numpy as np
'''
a = np.array([[1,1],
             [0,1]])  
b = np.arange(4).reshape((2,2))

print(b)
#点乘
c = a*b

#矩阵运算
c_dot=np.dot(a,b)
c_dot_2 = a.dot(b)

print(c)
print(c_dot)
print(c_dot_2)

#生成一个0到1之间的随机数
a = np.random.random((2,4))
print(a)
print(np.sum(a,axis=1))#行数求和

print(np.min(a,axis=0))#列数求最小值
print(np.max(a,axis=0))#列求最大值
'''
'''
A = np.arange(14,2,-1).reshape((3,4))
print(A)
'''
'''
print(np.argmin(A)) #最小值的索引
print(np.argmax(A))#最大值的索引
print(np.mean(A))#整个矩阵的平均值
print(np.average(A))#老版本的求平均值
print(np.median(A))#求中位数
print(np.cumsum(A))#数字累加的过程
print(np.diff(A))#累差的方法
print(np.nonzero(A))#非零的值的位置
print(np.sort(A))
'''
#矩阵的转置
'''
print(np.transpose(A))
print(A.T)
#矩阵诚意自己的转置
print((A.T).dot(A))
#设置所有小于5的值都等于5,所有大于9的值都等于9
print(np.clip(A,5,9))
'''

'''
A=np.arange(3,15).reshape(3,4)
print(A)

print(A[1][1])
print(A[2][1])
print(A[2,1])
print(A[2,:])
print(A[:,1])
print(A[1,1:3])

#展示行
for row in A:
    print(row)
    print('\n')    
#展示列
for column in A.T:
    print(column)
#将矩阵序列化
print(A.flatten())
for item in A.flat:
    print(item)
'''
'''
#矩阵的合并
A = np.array([1,1,1])
B = np.array([2,2,2])

C = np.vstack((A,B))#上下合并
D = np.hstack((A,B))#左右合并
print(A.shape,C.shape,D.shape)
print(C)
print('\n')
print(D)
print(A)

print(A[np.newaxis,:].shape)

print(A[np.newaxis,:])#增加一个维度，在列上增加一个维度
print(A[:,np.newaxis])#增加一个横向的维度
print(A.reshape(3,1))#改变矩阵的维度
print(A.shape)
'''


#矩阵的分隔
'''
A = np.arange(12).reshape(3,4)
print(A)
print(np.split(A,2,axis = 1))
'''


#pandas筛选数据

import pandas as pd
dates = pd.date_range('20130101',periods=6)
#print(dates)

df = pd.DataFrame(np.arange(24).reshape((6,4)),index = dates,columns = ['A','B','C','D'])
'''
print(df)
print(df['A'],df.A)
print(df[0:3],df['20130102':'20130104'])
'''
#select by label:loc
#print(df.loc['20130102'])

#print(df.loc['20130102',['A','B']])

#select by position:iloc
#print(df.iloc[[1,3,5],1:3])
# mixed selection:ix
#print(df.ix[:3,['A','C']])

#Boolean indexing
'''
print(df)

print(df[df.A>8])
print(df.A>8)
df['F']=np.nan
df['E']=pd.Series([1,2,3,4,5,6],index = pd.date_range('20130101',periods=6))
print(df)
'''
'''
#pandas中的nan值丢失值
df.iloc[0,1]=np.nan
df.iloc[1,2]=np.nan
print(df)
#丢掉nan的一行或者一列
print(df.dropna(axis=0,how='all'))#how={'any','all'}

#用上缺失的数据，默认为0，或者默认为1
print(df.fillna(value=0)) #填为0
print(df.isnull())
print(np.any(df.isnull())==True)#是否有NaN的值

#使用pandas对已知数据的读取
#read_csv 读取excel文件
#to_csv 保存数据
#数据的合并 concatenating
df1 = pd.DataFrame(np.ones((3,4))*0,columns=['a','b','c','d'])
df2 = pd.DataFrame(np.ones((3,4))*1,columns=['a','b','c','d'])
df3 = pd.DataFrame(np.ones((3,4))*2,columns=['a','b','c','d'])

print(df1)
print(df2)
print(df3)
res = pd.concat([df1,df2,df3],axis=0,ignore_index=True)
print(res)
'''
'''
#join,['inner','outer']
df1 = pd.DataFrame(np.ones((3,4))*0,columns = ['a','b','c','d'],index=[1,2,3])
df2 = pd.DataFrame(np.ones((3,4))*1,columns = ['b','c','d','e'],index=[2,3,4])

print(df1,df2)

res = pd.concat([df1,df2],join='outer',ignore_index = True)

print(res)
'''

import pandas as pd
'''
#sample example 
left = pd.DataFrame({'Key':['K0','K1','K2','K3'],
                     'A':['A0','A1','A2','A3'],
                     'B':['B0','B1','B2','B3']})
right = pd.DataFrame({'Key':['K0','K1','K2','K3'],
                      'C':['C0','C1','C2','C3'],
                      'D':['D0','D1','D2','D3']})
print(left)
print(right)
res = pd.merge(left,right,on="Key") #基于某一列进行合并
print(res)
'''
'''
#consider two keys
left = pd.DataFrame({'Key1':['K0','K0','K1','K2'],
                     'Key2':['K0','K1','K0','K1'],
                     'A':['A0','A1','A2','A3'],
                     'B':['B0','B1','B2','B3']})
right = pd.DataFrame({'Key1':['K0','K1','K1','K3'],
                      'Key2':['K0','K0','K0','K0'],
                      'C':['C0','C1','C2','C3'],
                      'D':['D0','D1','D2','D3']})

#how = left,right,outer,inner默认是inner
res = pd.merge(left,right,on=['Key1','Key2'],how ="outer")
print(res)


#indicator

df1 = pd.DataFrame({'col1':[0,1],'col_left':['a','b']})
df2 = pd.DataFrame({'col1':[1,2,2],'col_right':[2,2,2]})
print(df1)
print(df2)

res = pd.merge(df1,df2,on='col1',how = 'outer',indicator=True)
print(res)

boys = pd.DataFrame({'k':['K0','K1','K2'],'age':[1,2,3]})
girls = pd.DataFrame({'k':['K0','K0','K3'],'age':[4,5,6]})

print(boys)
print(girls)
res = pd.merge(boys,girls,on='k',suffixes=['_boys','_girls'],how = 'outer',indicator=True)
print(res)
'''
'''

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#plot data
#Series
data = pd.Series(np.random.randn(1000),index=np.arange(1000))

data = data.cumsum()#累加
data.plot()
#dataframe
data = pd.DataFrame(np.random.randn(1000,4),
                    index=np.arange(1000),
                    columns = list("ABCD"))
data= data.cumsum()
data.plot()
plt.show()

#线是使用plot,点是使用scatter
ax = data.plot.scatter(x='A',y='B',color='DarkBlue',label='Class 1')
data.plot.scatter(x='A',y='C',color='DarkGreen',label='Class 2',ax=ax)
plt.show()

'''

  
    






